#include <iostream>
#include <vector>
#include <time.h>
#include <fstream>
#include <random>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <chrono>

using namespace std;

//arm lengths
float l1 = 2.0;
float l2 = 2.0;
float l3 = 2.0;

//start and end points
xs = -2;
ys = 0;
zs = 0;

xe = 2;
ye = 4;
ze = 0;
vector <float> start_point { xs, ys, zs };
vector <float> end_point { xe, ye, ze };


struct state{
    float theta1;
    float theta2;
    float theta3;
    
    float time;
    
    //position of the end points (x1,y1,z1)   (x2,y2,z2)  (x3,y3,z3)
    float x1 = 0;
    float y1 = l1;
    float z1 = 0;
    
    float x2 = l2*sin(theta2)*cos(theta1);
    float y2 = l1 - l2*cos(theta2);
    float z2 = l2*sin(theta2)*sin(theta1);
    
    float x3 = ( l2*sin(theta2) - l3*sin(theta2+theta3) )*cos(theta1);
    float y3 = l1 - l2*cos(theta2) + l3*cos(theta2+theta3);
    float z3 = ( l2*sin(theta2) - l3*sin(theta2+theta3) )*sin(theta1);
    
    state(float mtheta1, float mtheta2, float mtheta3){
        theta1 = mtheta1;
        theta2 = mtheta2;
        theta3 = mtheta3;
    }
    
    state(){
        theta1 = 0.0;
        theta2 = 0.0;
        theta3 = 0.0;
        time = 0.0;
    }
    
    void display_state(){
        cout << "\nStates-------------- at time: " << time <<"\n";
        cout << "Angles are: (\t" << theta1 << "\t" <<theta2 << "\t" << theta3 << ")" <<endl;
        cout << "Point positions are :\n" << "Point 1: ( " << x1 << " , " << y1 << " , " << z1 << " )" << "\tPoint 2: ( " << x2 << " , " << y2 << " , " << z2 << " )\t";
        cout << "Point 3: ( " << x3 << " , " << y3 << " , " << z3 << " )" << endl;
    }
};

vector <vector <vector <float>>> obstacle_vector{};

//function definitions
vector <float> get_thetas (const vector <float> &point);  //-----> inverse kinematics
float theta_vector(float p1x, float p1y, float p2x, float p2y);  //-----> calculate angle (theta) value
int main(){
    obstacle_vector={ {{5,0,5},{5,0,-5},{-5,0,-5},{-5,0,5},{5,-5,5},{5,-5,-5},{-5,-5,-5},{-5,-5,5}} };
    
    cout << "Starts now" << endl;
    state newstate;
    newstate.display_state();
    
    get_thetas(start_point);
    get_thetas(end_point);
    //generate c-space
}

vector <float> get_thetas (const vector <float> &point) {
    float x3 = point.at(0);
    float y3 = point.at(1);
    float z3 = point.at(2);
    
    float theta_1 = atan(z/x);
    
    //calculate theta_2
    
    
}

float theta_vector(float p1x, float p1y, float p2x, float p2y){
    if(((p2y-p1y)>=0)&&((p2x-p1x)>=0))             //1st quadrant
        return (atan((p2y-p1y)/(p2x-p1x)));
    else if(((p2y-p1y)>=0)&&((p2x-p1x)<0))         //2nd quadrant
        return (3.14159+atan((p2y-p1y)/(p2x-p1x)));
    else if(((p2y-p1y)<0)&&((p2x-p1x)<0))           //3rd quadrant
        return (3.14159+atan((p2y-p1y)/(p2x-p1x)));
    else if(((p2y-p1y)<0)&&((p2x-p1x)>=0))          //4th quadrant
        return ((2*3.14159)+atan((p2y-p1y)/(p2x-p1x)));
    else
        return (0);
}
